/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * RegistrationServer.java
 *
 * Created on Aug 13, 2011, 11:56:49 PM
 */

package dlcf_registration;

import java.sql.*;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import static  dlcf_registration.DataBaseHandler.*;
/**
 *
 * @author AJIBADE
 */
public class RegistrationServer extends javax.swing.JFrame {

    protected String DEFAULT_HOST = "127.0.0.1";
    protected int DEFAULT_PORT = 8902;
    String host;
    int port;
    ListenServer listen;
    /** Creates new form RegistrationServer */
    public RegistrationServer()
    {
        initComponents();
        setLocationRelativeTo(null);

        loadDriver();
        createDataBase("dlcf_registration");
        createTable("triumph2011","dlcf_registration");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        portDisplay = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        logDisplay = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        msgDisplay = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        jPanel2.setBackground(new java.awt.Color(0, 102, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Stop");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap(188, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jButton1, jButton2});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton1, jButton2});

        logDisplay.setColumns(20);
        logDisplay.setRows(5);
        jScrollPane1.setViewportView(logDisplay);

        msgDisplay.setColumns(20);
        msgDisplay.setRows(5);
        jScrollPane2.setViewportView(msgDisplay);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(portDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(portDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        listen = new ListenServer(this);
        listen.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        //System.exit(0);//dispose();
    }//GEN-LAST:event_jButton2ActionPerformed
    class ListenServer extends Thread
    {

        RegistrationServer source;
        ServerSocket listenSocket;
        int port;
        Socket connection;
        HandleServer handle;
        boolean again = true;

        // **************  ListenServer constructor
        ListenServer(RegistrationServer s)
        {
            super();
            source = (RegistrationServer) s;

        }  // end constructor

        // **************  run
        public void run()
        {
            if (!(source.portDisplay.getText()).equals(""))
            {
                port = Integer.parseInt(source.portDisplay.getText());
            } else
            {
                port = source.DEFAULT_PORT;
            }

            try
            {

                listenSocket = new ServerSocket(port);
                source.logDisplay.setText("Server started:\n  listening on port " + port + "\n\n");

                while (true)
                {

                    Socket connection = listenSocket.accept();
                    HandleServer handleServer = new HandleServer(connection, source);
                    handleServer.start();

                }  // end while

            } catch (IOException e)
            {
                e.printStackTrace();
                source.logDisplay.setText("Error is opening ServerSocket\n");
                System.exit(1);
            }  // end catch


        }  // end run
    }  // end ListenServer

    //******************************** HandleServer  ***********
    class HandleServer extends Thread
    {

        RegistrationServer source;
        Socket connection;
        InputStream inStream;
        DataInputStream inDataStream;
        OutputStream outStream;
        DataOutputStream outDataStream;
        String message;

        // **************  HandleServer constructor
        HandleServer(Socket socket, RegistrationServer s)
        {

            super();
            connection = socket;
            source = s;

        }  // end constructor

        // **************  run
        public void run()
        {

            String stringIn, stringOut;
            boolean again = true;

            InetAddress inet = connection.getInetAddress();
            String origin = inet.getHostName();
            int originport = connection.getPort();

            source.logDisplay.append("Adding Client: \n  " + origin + ":" + originport + "\n\n");


            try
            {

                outStream = connection.getOutputStream();
                outDataStream = new DataOutputStream(outStream);
                inStream = connection.getInputStream();
                inDataStream = new DataInputStream(inStream);

                PreparedStatement pstmt;
                Connection conn;
                String query = "INSERT INTO triumph2011 VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?)";
                while (true)
                {

                    message = inDataStream.readUTF();
                    //source.logDisplay.append("  Message, below, received\n");
                    ///source.msgDisplay.setForeground(Color.red);
                    source.msgDisplay.setText(message);

                    System.out.println(message);

                    //StringTokenizer token = new StringTokenizer(message, "*");
                    //System.out.println(token.countTokens());
                    String[] dataArray = new String[12];
                    String[] result = message.split(":");
                    System.out.println("Length: "+ result.length);
                    for(int i=0; i<result.length;i++)
                    {
                        System.out.println(result[i]);
                    }

                    try
                    {
                        conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/dlcf_registration", "root", "");
                        pstmt = conn.prepareStatement(query);
                        int rand =(int)(1+Math.random()*10000);
                        pstmt.setInt(1, rand);
                        pstmt.setString(2, result[0]);
                        pstmt.setString(3, result[1]);
                        pstmt.setString(4, result[2]);
                        pstmt.setString(5, result[3]);
                        pstmt.setString(6, result[4]);
                        pstmt.setString(7, result[5]);
                        pstmt.setString(8, result[6]);
                        pstmt.setString(9, result[7]);
                        pstmt.setString(10, result[8]);
                        pstmt.setString(11, result[9]);
                        pstmt.setString(12, result[10]);
                        pstmt.setString(13, result[11]);

                        int resp =  pstmt.executeUpdate();
                        if(resp != -1)
                        {
                            System.out.println("Values Inserted");
                        }

                        pstmt.close();
                        conn.close();
                    }
                    catch (SQLException ex)
                    {
                        System.out.println("Error "+ex.getMessage());
                    }
                    //System.out.println(dataArray[8]);
                    //outDataStream.writeUTF(message);
                    //source.logDisplay.append("  Message returned to client \n\n");

                }  // end while

            } // end try
            catch (EOFException except)
            {
                source.logDisplay.append("  Connection closed by Client\n\n");
                try
                {
                    connection.close();
                    return;
                } catch (IOException e)
                {
                    e.printStackTrace();
                    return;
                }  // end IOException

            } // end catch EOFException
            catch (IOException e)
            {
                source.logDisplay.append("  Connection closed abormally\n");
                e.printStackTrace();
                return;
            }  // end catch IOException


        }  // end run
    }  // end HandleServer

    // **************  main
    public static void main(String[] args)
    {
        RegistrationServer server = new RegistrationServer();
        server.setVisible(true);

    }  // end main

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea logDisplay;
    private javax.swing.JTextArea msgDisplay;
    private javax.swing.JTextField portDisplay;
    // End of variables declaration//GEN-END:variables

}
